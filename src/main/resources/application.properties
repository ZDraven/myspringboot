# BANNER
# Banner file encoding.
banner.charset=UTF-8
# Banner file location.
banner.location=classpath:banner.txt
# Banner image file location (jpg/png can also be used).
#banner.image.location=classpath:banner.gif
# Width of the banner image in chars (default 76)
banner.image.width=
# Height of the banner image in chars (default based on image height)
banner.image.height=
# Left hand image margin in chars (default 2)
banner.image.margin=
# If images should be inverted for dark terminal themes (default false)
banner.image.invert=

# 解决乱码问题
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true

# EMBEDDED SERVER CONFIGURATION (ServerProperties)
#配置服务器端口，默认为8080
server.port=8080
#用户回话session过期时间，以秒为单位
server.session.timeout=3600
#配置访问路径，默认为/
server.context-path=/
#配置Tomcat编码，默认为UTF-8
server.tomcat.uri-encoding=UTF-8
#Tomcat是否开启压缩，默认为关闭
#server.tomcat.compression=on
server.compression.enabled=true

#默认支持文件上传
spring.http.multipart.enabled =true
spring.http.multipart.file-size-threshold =0
# 上传文件的临时目录
#spring.http.multipart.location=E:/upload/temp/
# 最大支持文件大小
spring.http.multipart.max-file-size =10MB
# 最大支持请求大小
spring.http.multipart.max-request-size =100Mb

# LOGGING
#logging.path=/var/logs
#logging.file=myapp.log
#logging.config=classpath:log4j2.xml

# DATASOURCE
spring.datasource.url=jdbc:mysql://localhost:3306/spboot?characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=wmzycn
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.tomcat.max-active=20
spring.datasource.tomcat.max-idle=10
spring.datasource.tomcat.min-idle=5
spring.datasource.tomcat.initial-size=5
spring.datasource.tomcat.max-wait=10000
spring.datasource.tomcat.validation-query=SELECT 1
spring.datasource.tomcat.test-on-borrow=false
spring.datasource.tomcat.test-while-idle=true
spring.datasource.tomcat.time-between-eviction-runs-millis=18800
# 过滤器，并设置了延迟时间为0 框架自动将大于该时间的数据查询进行警告输出
spring.datasource.tomcat.jdbc-interceptors=ConnectionState;SlowQueryReport(threshold=100)


# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=654321
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0

# activemq
# activeMQ地址
# web http://localhost:8161/admin/
spring.activemq.broker-url=tcp://127.0.0.1:61616
#集群配置
#spring.activemq.broker-url=failover:(tcp://172.18.1.188:61616,tcp://172.18.1.18:61616)
#activeMQ用户名，根据实际情况配置
spring.activemq.user=admin
#activeMQ密码，根据实际情况配置
spring.activemq.password=admin
#是否启用内存模式（也就是不安装MQ，项目启动时同时也启动一个MQ实例）
spring.activemq.in-memory=true
#是否替换默认的connectionFactory,是否创建PooledConnectionFactory，默认false
spring.activemq.pool.enabled=false
#最大连接数
spring.activemq.pool.maxConnections=2
#超时时间
spring.activemq.pool.expiryTimeout=0
#空闲时间
spring.activemq.pool.idleTimeout=30000
#信任所有的包
spring.activemq.packages.trust-all=true
#配置消息模型为pub/sub方式，默认是false-队列否则true-主题   默认队列和主题不能同时使用
#spring.jms.pub-sub-domain=true

#mongodb
#单机
#spring.data.mongodb.uri=mongodb://name:pass@localhost:27017/test
spring.data.mongodb.uri=mongodb://localhost:27017/chy
#集群
#spring.data.mongodb.uri=mongodb://preekdb.mongo9090.shard.eakay.cn:30000,preekdb.mongo9083.shard.eakay.cn:30000,preekdb.mongo9093.shard.eakay.cn:30000/charge-test

## fastdfs-client.properties
fastdfs.connect_timeout_in_seconds = 10
fastdfs.network_timeout_in_seconds = 30
fastdfs.charset = UTF-8
fastdfs.http_anti_steal_token = false
fastdfs.http_secret_key = FastDFS1234567890
fastdfs.http_tracker_http_port = 8080
fastdfs.tracker_servers = preektracker.inc.eakay.cn:22122

# Elasticsearch
# 9200端口是用来让HTTP REST API来访问ElasticSearch，而9300端口是传输层监听的默认端口
elasticsearch.ip=127.0.0.1
elasticsearch.port=9300
elasticsearch.pool=5
elasticsearch.cluster.name=elasticsearch

#elasticsearch.ip=10.30.90.92
#elasticsearch.port=9300
#elasticsearch.pool=5
#elasticsearch.cluster.name=wutesteklogs

# kafka
# 集群配置
# spring.kafka.bootstrap-servers=192.168.1.107:9092,192.168.1.108:9092,192.168.1.109:9092
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=myGroup
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#hbase
hbase.zookeeper.quorum=localhost
hbase.zookeeper.port=2181

# 自定义属性

# activemq
application.queueDestinationName1=spboot.queue1
application.queueDestinationName2=spboot.queue2
application.topicDestinationName1=spboot.topic1
application.topicDestinationName2=spboot.topic2

# ImageType
ImageType.jpg=jpg
ImageType.bmp=bmp
ImageType.png=png